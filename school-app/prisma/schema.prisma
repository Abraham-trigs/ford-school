generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------ ENUMS ------------------
enum Role {
  SUPERADMIN
  ADMIN
  TEACHER
  SECRETARY
  ACCOUNTANT
  LIBRARIAN
  COUNSELOR
  NURSE
  CLEANER
  JANITOR
  COOK
  KITCHEN_ASSISTANT
  STUDENT
  PARENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum AttendanceSessionType {
  STUDENT_CLASS
  STAFF_WORK
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum PaymentType {
  DAILY
  WEEKLY
  MONTHLY
  TERMLY
  YEARLY
  ONE_TIME
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  MOBILE_MONEY
  CARD
  CHEQUE
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
  REFUNDED
}

enum InvoiceStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  CANCELLED
}

enum ReceiptType {
  FULL_PAYMENT
  PART_PAYMENT
  REFUND
}

enum ReceiptStatus {
  ISSUED
  REPRINTED
  CANCELLED
}

enum ExamType {
  MIDTERM
  ENDTERM
  MOCK
  FINAL
  WAEC
  OTHER
}

enum PromotionDecision {
  PROMOTED
  REPEATED
  WITHHELD
}

enum AssetCategory {
  CLASSROOM
  LAB
  LIBRARY
  KITCHEN
  OFFICE
  TRANSPORT
  OTHER
}

enum AssetCondition {
  NEW
  GOOD
  FAIR
  POOR
  DAMAGED
}

enum AssetAction {
  ADDED
  REMOVED
  MAINTENANCE
  TRANSFER
  DISPOSED
}

enum VisitorStatus {
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

enum EventType {
  HOLIDAY
  EXAM
  ASSEMBLY
  CELEBRATION
  MEETING
  OTHER
}

enum LibraryAction {
  BORROWED
  RETURNED
  LOST
  DAMAGED
  ADDED
}

enum DisciplineType {
  WARNING
  SUSPENSION
  EXPULSION
  NOTE
}

// ------------------ MODELS ------------------
model User {
  id           String    @id @default(cuid())
  name         String
  email        String?   @unique
  phone        String?
  password     String
  role         Role
  status       UserStatus @default(ACTIVE)
  profilePic   String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  staff        Staff?
  student      Student?
  parentOf     Student[] @relation("UserParentOf")
  parents      Student[] @relation("UserParents")

  payments     Payment[] @relation("PaymentUser")
  issuedPayments Payment[] @relation("PaymentIssuer")
  invoices     Invoice[]
  attendanceRecords AttendanceRecord[]

  createdEvents SchoolEvent[] @relation("EventCreator")
  events        SchoolEvent[] @relation("EventParticipants")

  borrowedBooks LibraryLog[] @relation("LibraryUser")
  drivingVehicles TransportVehicle[] @relation("VehicleDriver")
  issuedDisciplineLogs DisciplineLog[] @relation("DisciplineIssuer")
  createdAnnouncements Announcement[]

  createdVisitorLogs VisitorLog[] @relation("VisitorCreated")
  visitedVisitorLogs VisitorLog[] @relation("VisitorVisited")
  approvedVisitorLogs VisitorLog[] @relation("VisitorApproved")

  subjectAssignments SubjectAssignment[]
  attendanceSessionsTaken AttendanceSession[] @relation("AttendanceTeacher")
  promotionsDecided Promotion[] @relation("PromotionDecider")
  schoolExpensesPaid SchoolExpense[] @relation("ExpensePaidBy")
  schoolIncomesRecorded SchoolIncome[] @relation("IncomeRecordedBy")
  departments Department[] @relation("DepartmentOwner")
  sectionsTaught Section[] @relation("SectionTeacher")

  performedAssetLogs AssetLog[] @relation("PerformedAssetLogs")
}

model Staff {
  id        String   @id @default(cuid())
  userId    String   @unique
  position  String
  user      User     @relation(fields: [userId], references: [id])
  salaries  StaffSalary[] @relation("SalaryIssuer")
  departments Department[] @relation("DepartmentStaff")
}

model Student {
  id        String   @id @default(cuid())
  userId    String   @unique
  sectionId String
  rollNo    String
  user      User     @relation(fields: [userId], references: [id])
  section   Section  @relation(fields: [sectionId], references: [id])
  parents   User[]   @relation("UserParents")
  parentOf  User[]   @relation("UserParentOf")
  promotions Promotion[]
}

model Section {
  id        String    @id @default(cuid())
  name      String
  students  Student[]
  teacherId String?
  teacher   User?     @relation("SectionTeacher", fields: [teacherId], references: [id])
  attendanceSessions AttendanceSession[] @relation("AttendanceSection")
  exams     Exam[]
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
}

model AttendanceRecord {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  status    AttendanceStatus
  date      DateTime
  sessionId String?
  session   AttendanceSession? @relation("AttendanceSessionRecords", fields: [sessionId], references: [id])
}

model AttendanceSession {
  id        String                @id @default(cuid())
  type      AttendanceSessionType
  teacherId String
  teacher   User                  @relation("AttendanceTeacher", fields: [teacherId], references: [id])
  sectionId String
  section   Section               @relation("AttendanceSection", fields: [sectionId], references: [id])
  records   AttendanceRecord[] @relation("AttendanceSessionRecords")
}

model Payment {
  id          String      @id @default(cuid())
  amount      Float
  paymentType PaymentType
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  transactionRef String?   @unique
  userId      String
  user        User        @relation("PaymentUser", fields: [userId], references: [id])
  issuedById  String?
  issuedBy    User?       @relation("PaymentIssuer", fields: [issuedById], references: [id])
  createdAt   DateTime    @default(now())
}

model Invoice {
  id          String       @id @default(cuid())
  amount      Float
  status      InvoiceStatus @default(UNPAID)
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  receipts    Receipt[]
}

model Receipt {
  id        String      @id @default(cuid())
  invoiceId String?
  invoice   Invoice?    @relation(fields: [invoiceId], references: [id])
  type      ReceiptType
  status    ReceiptStatus @default(ISSUED)
  issuedAt  DateTime    @default(now())
}

model Promotion {
  id          String @id @default(cuid())
  studentId   String
  student     Student @relation(fields: [studentId], references: [id])
  term        Int?
  decision    PromotionDecision
  decidedById String
  decidedBy   User @relation("PromotionDecider", fields: [decidedById], references: [id])
}

model SubjectAssignment {
  id        String @id @default(cuid())
  teacherId String
  teacher   User @relation(fields: [teacherId], references: [id])
  subject   String
}

model StaffSalary {
  id         String @id @default(cuid())
  staffId    String
  staff      Staff @relation("SalaryIssuer", fields: [staffId], references: [id])
  amount     Float
  payPeriod  PaymentType
  status     PaymentStatus @default(PENDING)
  method     PaymentMethod
}

model SchoolExpense {
  id        String @id @default(cuid())
  purpose   String
  amount    Float
  paidById  String?
  paidBy    User? @relation("ExpensePaidBy", fields: [paidById], references: [id])
  expenseDate DateTime @default(now())
}

model SchoolIncome {
  id           String @id @default(cuid())
  description  String
  amount       Float
  receivedFrom String?
  paymentMethod PaymentMethod
  recordedById String?
  recordedBy   User? @relation("IncomeRecordedBy", fields: [recordedById], references: [id])
  receivedAt   DateTime @default(now())
}

model Department {
  id        String @id @default(cuid())
  name      String
  staff     Staff[] @relation("DepartmentStaff")
  sections  Section[]
  ownerId   String?
  owner     User? @relation("DepartmentOwner", fields: [ownerId], references: [id])
}

model Asset {
  id          String @id @default(cuid())
  name        String
  description String?
  category    AssetCategory
  condition   AssetCondition
  quantity    Int     @default(1)
  location    String?
}

model AssetLog {
  id         String @id @default(cuid())
  assetId    String
  action     AssetAction
  notes      String?
  performedById String
  performedBy  User @relation("PerformedAssetLogs", fields: [performedById], references: [id])
  createdAt  DateTime @default(now())
}

model VisitorLog {
  id            String @id @default(cuid())
  visitorName   String
  phone         String?
  email         String?
  checkIn       DateTime @default(now())
  checkOut      DateTime?
  purpose       String
  visitedUserId String?
  visitedUser   User? @relation("VisitorVisited", fields: [visitedUserId], references: [id])
  status        VisitorStatus @default(CHECKED_IN)
  notes         String?
  createdById   String
  createdBy     User @relation("VisitorCreated", fields: [createdById], references: [id])
  approvedById  String?
  approvedBy    User? @relation("VisitorApproved", fields: [approvedById], references: [id])
}

model SchoolEvent {
  id          String @id @default(cuid())
  title       String
  description String?
  eventType   EventType
  startDate   DateTime
  endDate     DateTime
  isPublic    Boolean @default(true)
  createdById String
  createdBy   User   @relation("EventCreator", fields: [createdById], references: [id])
  participants User[] @relation("EventParticipants")
}

model LibraryLog {
  id        String @id @default(cuid())
  bookId    String
  userId    String
  user      User @relation("LibraryUser", fields: [userId], references: [id])
  action    LibraryAction
  borrowedAt DateTime @default(now())
  returnedAt DateTime?
}

model TransportVehicle {
  id        String @id @default(cuid())
  name      String
  capacity  Int
  driverId  String?
  driver    User? @relation("VehicleDriver", fields: [driverId], references: [id])
  acquiredAt DateTime?
  condition  AssetCondition
}

model DisciplineLog {
  id        String @id @default(cuid())
  studentId String?
  issuedById String
  issuedBy  User @relation("DisciplineIssuer", fields: [issuedById], references: [id])
  type      DisciplineType
  notes     String?
  createdAt DateTime @default(now())
}

model Announcement {
  id        String @id @default(cuid())
  content   String
  createdById String
  createdBy User @relation(fields: [createdById], references: [id])
  createdAt DateTime @default(now())
}

model Exam {
  id         String @id @default(cuid())
  title      String
  sectionId  String
  section    Section @relation(fields: [sectionId], references: [id])
  startDate  DateTime
  endDate    DateTime
  examType   ExamType
}
