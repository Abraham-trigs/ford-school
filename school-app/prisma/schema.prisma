generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

///////////////////////
// GLOBAL ENUMS
///////////////////////

enum Role {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  PRINCIPAL
  VICE_PRINCIPAL
  TEACHER
  ASSISTANT_TEACHER
  COUNSELOR
  LIBRARIAN
  EXAM_OFFICER
  FINANCE
  HR
  RECEPTIONIST
  IT_SUPPORT
  TRANSPORT
  NURSE
  COOK
  CLEANER
  SECURITY
  MAINTENANCE
  STUDENT
  CLASS_REP
  PARENT
  ALUMNI
  AUDITOR
  INSPECTOR
  GUEST
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  MOBILE_MONEY
  CHEQUE
  OTHER
}

///////////////////////
// TENANTS & SESSIONS
///////////////////////

model SchoolSession {
  id              String              @id @default(cuid())
  name            String
  domain          String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now())

  users           UserSession[]

  createdRecords  FinanceRecord[]     @relation("CreatedByUserOnSession")
  approvedRecords FinanceRecord[]     @relation("ApprovedByUserOnSession")
  uploadedFiles   FinanceAttachment[] @relation("UploadedByUserOnSession")
}


model School {
  id             String           @id @default(cuid())
  name           String
  address        String?
  financeRecords FinanceRecord[]
  teachers       Teacher[]
  students       Student[]
  hrStaff        HR[]
  auditors       Auditor[]
  classes        Class[]
  exams          Exam[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())

  inspectors      Inspector[]
  libraries       Library[]
  classReps       ClassRep[]
  cleaningStaff   CleaningStaff[]
  cookStaff       CookStaff[]
  financeBudgets  FinanceBudget[]
  financeInsights FinanceInsightCache[]
}

model UserSession {
  id           String       @id @default(cuid())
  email        String       @unique
  passwordHash String
  role         Role
  schoolId     String
  school       SchoolSession @relation(fields: [schoolId], references: [id])
  sessions     Session[]    // JWT refresh tokens
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())

  // Finance relations
  createdRecords  FinanceRecord[] @relation("CreatedByUserOnSession")
  approvedRecords FinanceRecord[] @relation("ApprovedByUserOnSession")
  uploadedFiles   FinanceAttachment[] @relation("UploadedByUserOnSession")
}

model Session {
  id           String      @id @default(cuid())
  userId       String
  user         UserSession @relation(fields: [userId], references: [id])
  token        String      @unique
  expiresAt    DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
}

///////////////////////
// ACADEMIC MODELS
///////////////////////

model Student {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  class       String
  classId     String?
  section     String?
  age         Int
  gender      String?
  dateOfBirth DateTime?
  parentName  String
  parentPhone String?
  email       String? 
  address     String?
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  classRef    Class?   @relation("StudentToClass", fields: [classId], references: [id])

  @@index([schoolId])
}

model Teacher {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  phone         String?
  role          String    @default("TEACHER")
  subjects      String[]
  classes       String[]
  hireDate      DateTime  @default(now())
  active        Boolean   @default(true)
  schoolId      String
  school        School    @relation(fields: [schoolId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  classesHandled Class[]  @relation("TeacherToClass")

  @@index([schoolId])
}

model Class {
  id        String   @id @default(cuid())
  name      String
  level     String
  teacherId String?
  teacher   Teacher? @relation("TeacherToClass", fields: [teacherId], references: [id])
  students  Student[] @relation("StudentToClass")
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  exams     Exam[]

  @@index([schoolId])
}

model Exam {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  classId     String
  class       Class    @relation(fields: [classId], references: [id])
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@index([schoolId])
}

///////////////////////
// STAFF MODELS
///////////////////////

model HR {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  position  String?
  role      String?
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([schoolId])
}

model Auditor {
  id        String   @id @default(cuid())
  name      String
  department String
  level     String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([schoolId])
}

model Inspector {
  id        String   @id @default(cuid())
  name      String
  department String
  level     String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([schoolId])
}

model Library {
  id        String   @id @default(cuid())
  name      String
  category  String
  quantity  Int
  location  String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([schoolId])
}

model ClassRep {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  classId   String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([schoolId])
}

model CleaningStaff {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  shift     String
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([schoolId])
}

model CookStaff {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  phone          String?
  shift          String
  specialization String?
  schoolId       String
  school         School   @relation(fields: [schoolId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  @@index([schoolId])
}

///////////////////////
// FINANCE MODULE
///////////////////////

enum FinanceType {
  INCOME
  EXPENSE
  SALARY
  PURCHASE
  OTHER
}

enum FinanceCategory {
  TUITION
  SALARY
  SUPPLIES
  MAINTENANCE
  UTILITIES
  EVENTS
  OTHER
}

enum FinanceStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionDirection {
  INFLOW
  OUTFLOW
}

model FinanceRecord {
  id            String        @id @default(cuid())
  schoolId      String
  school        School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  sessionId     String        // <--- link to SchoolSession
  session       SchoolSession @relation("CreatedByUserOnSession", fields: [sessionId], references: [id])

  createdById   String
  createdBy     UserSession   @relation("CreatedByUserOnSession", fields: [createdById], references: [id])

  approvedById  String?
  approvedBy    UserSession?  @relation("ApprovedByUserOnSession", fields: [approvedById], references: [id])

  type          FinanceType
  category      FinanceCategory
  amount        Decimal       @db.Decimal(10, 2)
  description   String?
  date          DateTime      @default(now())

  transactions  FinanceTransaction[]
  attachments   FinanceAttachment[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  approvedSessionId String?               // optional: only if the record is approved
  approvedSession   SchoolSession?       @relation("ApprovedByUserOnSession", fields: [approvedSessionId], references: [id])

}

model FinanceTransaction {
  id        String        @id @default(cuid())
  recordId  String
  record    FinanceRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)

  amount    Decimal       @db.Decimal(10, 2)
  direction TransactionDirection
  method    PaymentMethod
  reference String?       @unique
  timestamp DateTime      @default(now())

  createdAt DateTime      @default(now())
}

model FinanceAttachment {
  id            String        @id @default(cuid())
  recordId      String
  record        FinanceRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)

  sessionId     String
  session       SchoolSession @relation("UploadedByUserOnSession", fields: [sessionId], references: [id])

  uploadedById  String
  uploadedBy    UserSession   @relation("UploadedByUserOnSession", fields: [uploadedById], references: [id])

  url           String
  filename      String
  createdAt     DateTime      @default(now())
}


model FinanceBudget {
  id        String          @id @default(cuid())
  schoolId  String
  school    School          @relation(fields: [schoolId], references: [id])
  year      Int
  category  FinanceCategory
  allocated Decimal         @db.Decimal(10, 2)
  spent     Decimal         @db.Decimal(10, 2) @default(0)
  remaining Decimal         @db.Decimal(10, 2)
  updatedAt DateTime        @default(now())

  @@unique([schoolId, year, category])
}

model FinanceInsightCache {
  id          String     @id @default(cuid())
  schoolId    String
  school      School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  data        Json
  generatedAt DateTime   @default(now())
  expiresAt   DateTime
  version     String     @default("v1")

  @@index([schoolId, version])
}
